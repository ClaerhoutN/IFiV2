@using Plotly.Blazor
@using Plotly.Blazor.Traces

<PlotlyChart style="@($"width: {Width}; height: {Height};")" @bind-Config=_chartConfig @bind-Layout=_chartLayout Data="_chartData" @ref=_chart />

@code {
    [Parameter]
    public required string Height { get; set; }
    [Parameter]
    public required string Width { get; set; }
    [Parameter]
    public required Func<IReadOnlyList<StockDataPoint>> GetDataPoints { get; set; }
    [Parameter]
    public bool ShowTickLabels { get; set; }
    private Config _chartConfig;
    private PlotlyChart _chart;
    private Layout _chartLayout;
    private IList<ITrace> _chartData;
    private Scatter _chartScatter = new();
    private Candlestick _chartCandlestick = new();

    protected override async Task OnInitializedAsync()
    {
        _chartConfig = new Config
        {
            DisplayModeBar = Plotly.Blazor.ConfigLib.DisplayModeBarEnum.False,

        };
        _chartLayout = new Layout
        {
            XAxis = [new Plotly.Blazor.LayoutLib.XAxis
            {
                ShowTickLabels = ShowTickLabels, 
                FixedRange = true, 
                RangeSlider = new Plotly.Blazor.LayoutLib.XAxisLib.RangeSlider {
                    Visible = false
                }
            }],
            YAxis = [new Plotly.Blazor.LayoutLib.YAxis
            {
                ShowTickLabels = ShowTickLabels, 
                FixedRange = true
            }],
            HoverMode = Plotly.Blazor.LayoutLib.HoverModeEnum.False, 
            ShowLegend = false
        };
        if (!ShowTickLabels)
        {
            _chartLayout.Margin = new Plotly.Blazor.LayoutLib.Margin
            {
                T = 0, // Top margin
                R = 0, // Right margin
                B = 0, // Bottom margin
                L = 0, // Left margin
                Pad = 0 // Padding
            };
        }
        _chartCandlestick.Increasing = new Plotly.Blazor.Traces.CandlestickLib.Increasing
        {
            Line = new Plotly.Blazor.Traces.CandlestickLib.IncreasingLib.Line
            {
                Color = "green"
            }
        };
        _chartCandlestick.Decreasing = new Plotly.Blazor.Traces.CandlestickLib.Decreasing
        {
            Line = new Plotly.Blazor.Traces.CandlestickLib.DecreasingLib.Line
            {
                Color = "red"
            }
        };
        _chartScatter.Line = new Plotly.Blazor.Traces.ScatterLib.Line
        {
            Color = "black",
            Shape = Plotly.Blazor.Traces.ScatterLib.LineLib.ShapeEnum.Linear,
        };
        _chartData = new List<ITrace>()
        {
            _chartCandlestick,
            _chartScatter
        };
        await UpdateChartAsync();
    }

    public async Task UpdateChartAsync()
    {       
        var dp = GetDataPoints();
        _chartScatter.Y = dp.Select(x => (object)x.Close).ToList();
        _chartScatter.X = dp.Select(x => (object)x.Timestamp).ToList();

        _chartCandlestick.Open = dp.Select(x => (object)x.Open).ToList();
        _chartCandlestick.Close = dp.Select(x => (object)x.Close).ToList();
        _chartCandlestick.High = dp.Select(x => (object)x.High).ToList();
        _chartCandlestick.Low = dp.Select(x => (object)x.Low).ToList();
        _chartCandlestick.X = dp.Select(x => (object)x.Timestamp).ToList();


        if (_chart != null)
            await _chart.React();       
    }
}
