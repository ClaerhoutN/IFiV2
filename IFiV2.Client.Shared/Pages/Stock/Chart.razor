@using Plotly.Blazor
@using Plotly.Blazor.Traces

<PlotlyChart style="@($"width: {Width}; height: {Height};")" @bind-Config=_chartConfig @bind-Layout=_chartLayout Data="_chartData" @ref=_chart />

@code {
    [Parameter]
    public required string Height { get; set; }
    [Parameter]
    public required string Width { get; set; }
    [Parameter]
    public required IReadOnlyList<StockDataPoint> DataPoints { get; set; }
    [Parameter]
    public bool ShowTickLabels { get; set; }
    private Config _chartConfig;
    private PlotlyChart _chart;
    private Layout _chartLayout;
    private IList<ITrace> _chartData;
    private Scatter _chartScatter = new();

    protected override void OnInitialized()
    {
        _chartConfig = new Config
        {
            DisplayModeBar = Plotly.Blazor.ConfigLib.DisplayModeBarEnum.False,
            
        };

        _chartLayout = new Layout
        {
            XAxis = [new Plotly.Blazor.LayoutLib.XAxis
            {
                ShowTickLabels = ShowTickLabels, 
                FixedRange = true
            }],
            YAxis = [new Plotly.Blazor.LayoutLib.YAxis
            {
                ShowTickLabels = ShowTickLabels, 
                FixedRange = true
            }],
        };
        if (!ShowTickLabels)
        {
            _chartLayout.Margin = new Plotly.Blazor.LayoutLib.Margin
            {
                T = 0, // Top margin
                R = 0, // Right margin
                B = 0, // Bottom margin
                L = 0, // Left margin
                Pad = 0 // Padding
            };
        }

        _chartData = new List<ITrace>
        {
            _chartScatter
        };
        _chartScatter.Line = new Plotly.Blazor.Traces.ScatterLib.Line
        {
            Color = "black",
            Shape = Plotly.Blazor.Traces.ScatterLib.LineLib.ShapeEnum.Linear,
        };
        _chartScatter.Y = DataPoints.Select(x => (object)x.Close).ToList();
        _chartScatter.X = DataPoints.Select(x => (object)x.Timestamp).ToList();
    }
}
