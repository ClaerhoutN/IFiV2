@page "/stock/position-details/{SymbolWithExchange}"

<MudButton Disabled=_isLoading Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _navigationManager.NavigateTo("/stock"))">Back</MudButton>
@if(_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (_stockPosition != null)
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h4">@_stockPosition.Stock.SymbolWithExchange (@_stockPosition.Stock.Country)</MudText>
            <MudText Typo="Typo.subtitle1">@_stockPosition.Stock.Name</MudText>
        </MudCardHeader>
        <MudCardContent>
            @* <MudTextField ReadOnly="true" Value="@_stockPosition.LatestDataPoint.Timestamp" Label="Timestamp" />
            <MudTextField ReadOnly="true" Value="@_stockPosition.LatestDataPoint.Open" Label="Open" />
            <MudTextField ReadOnly="true" Value="@_stockPosition.LatestDataPoint.Close" Label="Close" />
            <MudTextField ReadOnly="true" Value="@_stockPosition.LatestDataPoint.Adjusted_close" Label="Adjusted Close" />
            <MudTextField ReadOnly="true" Value="@_stockPosition.LatestDataPoint.High" Label="High" />
            <MudTextField ReadOnly="true" Value="@_stockPosition.LatestDataPoint.Low" Label="Low" />
            <MudTextField ReadOnly="true" Value="@_stockPosition.LatestDataPoint.Volume" Label="Volume" /> *@
            <MudTextField ReadOnly="true" Value="@_stockPosition.Stock.Type" Label="Type" />
            <MudTextField ReadOnly="true" Value="@_stockPosition.Stock.Country" Label="Country" />
            <MudTextField ReadOnly="true" Value="@_stockPosition.Stock.Currency" Label="Currency" />
            <MudTextField ReadOnly="true" Value="@_stockPosition.Stock.Isin" Label="ISIN" />

            <MudTextField ReadOnly="true" Value="@_stockPosition._1DChange" Label="24H Change" Format="P" />
            <MudTextField ReadOnly="true" Value="@_stockPosition._7DChange" Label="7D Change" Format="P" />
            <MudTextField ReadOnly="true" Value="@_stockPosition._30DChange" Label="30D Change" Format="P" />
            <MudTextField ReadOnly="true" Value="@_stockPosition._1YChange" Label="1Y Change" Format="P" />

            <Chart ShowTickLabels=true Height="400px" Width="100vw" GetDataPoints="@(() => _stockPosition.DayDatapoints)" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RemoveStockPositionAsync">Remove</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    [Parameter]
    public string SymbolWithExchange { get; set; }
    [Inject]
    private IStockMarketService _stockMarketService { get; set; }
    [Inject]
    private NavigationManager _navigationManager { get; set; }
    private StockPosition _stockPosition;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {
            _stockPosition = _stockMarketService.GetStockPosition(SymbolWithExchange);
        }
        catch
        {
            //todo: log and inform user
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task RemoveStockPositionAsync()
    {
        _isLoading = true;
        try
        {
            await _stockMarketService.RemoveStockPositiomAsync(_stockPosition);
            _navigationManager.NavigateTo($"/stock");
        }
        catch
        {
            //todo: log and inform user
            _isLoading = false;
        }
    }
}
