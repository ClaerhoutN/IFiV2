@page "/stock/add"

<MudButton Disabled=_isLoading Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _navigationManager.NavigateTo("/stock"))">Back</MudButton>

<MudTextField Disabled=_isLoading T="string" Label="Search symbol" ValueChanged="SearchAsync" />
@if (_isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate=true />
}
else
{
    <MudList T="Stock" SelectedValueChanged="AddStockAsync">
        @foreach (var stock in _searchResults)
        {
            <MudListItem Value="@stock" Text="@(stock.SymbolWithExchange + " - " + stock.Name)" />
        }
    </MudList>
}

@code {
    private readonly List<Stock> _searchResults = new List<Stock>();
    [Inject]
    private IStockMarketService _stockMarketService { get; set; }
    [Inject]
    private NavigationManager _navigationManager { get; set; }
    private bool _isLoading = false;
    private async Task SearchAsync(string searchTerm)
    {
        _isLoading = true;
        try
        {
            _searchResults.Clear();
            _searchResults.AddRange(await _stockMarketService.SearchAsync(searchTerm));
        }
        catch
        {
            //todo: log and inform user
        }
        finally
        {
            _isLoading = false;
        }
    }
    private async Task AddStockAsync(Stock stock)
    {
        _isLoading = true;
        try
        {
            await _stockMarketService.AddStockPositionAsync(stock);
            _navigationManager.NavigateTo($"/stock");
        }
        catch
        {
            //todo: log and inform user
            _isLoading = false;
        }
    }
}
