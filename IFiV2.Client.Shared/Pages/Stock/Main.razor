@page "/"
@page "/stock"

<MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _navigationManager.NavigateTo("/stock/add"))"></MudIconButton>
<MudIconButton Icon="@Icons.Material.Filled.Refresh" Disabled=_isLoading Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ReloadAsync(true))"></MudIconButton>
<MudDataGrid T="StockPosition" Items="_stockPositions" Loading=_isLoading Striped="true" Hover="true" Dense="true" SelectedItemChanged="@(sp => _navigationManager.NavigateTo($"/stock/position-details/{sp.Stock.SymbolWithExchange}"))">
    <Columns>
        <PropertyColumn Property="@(x => x.Stock.SymbolWithExchange)" Title="Symbol">
            <CellTemplate>
                <MudText Typo="Typo.h4">@context.Item.Stock.SymbolWithExchange (@context.Item.Stock.Country)</MudText>
                <MudText Typo="Typo.subtitle1">@context.Item.Stock.Name</MudText>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="@(x => x.DayDatapoints.Count == 0 ? 0M : x.DayDatapoints[x.DayDatapoints.Count - 1].Close)" Title="Value" />
        <PropertyColumn Property="@(x => x._1DChange)" Title="24H change" Format="P" />
        <TemplateColumn>
            <CellTemplate>
                <Chart Height="200px" Width="300px" ShowTickLabels=false DataPoints="@(context.Item.DayDatapoints)" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    [Inject]
    private IStockMarketService _stockMarketService { get; set; }
    [Inject]
    private NavigationManager _navigationManager { get; set; }
    private IReadOnlyList<StockPosition> _stockPositions = new List<StockPosition>();
    private bool _isLoading = true;
    private static bool _isFirstLoad = true;
    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync(false);
    }

    private async Task ReloadAsync(bool refreshDataPoints)
    {
        _isLoading = true;
        try
        {
            _stockPositions = await _stockMarketService.GetStockPositionsAsync(_isFirstLoad, refreshDataPoints);
            _isFirstLoad = false;
        }
        catch
        {
            //todo: log and inform user
        }
        finally
        {
            _isLoading = false;
        }
    }
}
